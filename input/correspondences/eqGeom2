import equation
import geometry2

correspondence distanceBothSides:(equationG,geometryG) = 
    source t:equality <- equality[t1:expr,t2:equals,t3:expr]
    target l:line
    tokenRels ([t1:expr],[l:line]) :: length,
              ([t3:expr],[l:line]) :: length
    constructRel ([t:equality],[l:line]) :: repeq
    strength 1.0

correspondence areaBothSides:(equationG,geometryG) = 
    source t:equality <- equality[t1:expr,t2:equals,t3:expr]
    target r:rect
    tokenRels ([t1:expr],[r:rect]) :: area,
              ([t3:expr],[r:rect]) :: area
    constructRel ([t:equality],[r:rect]) :: repeq
    strength 1.0

correspondence distanceBrackets:(equationG,geometryG) = 
    source t:expr <- brackets[t1:open, t2:expr, t3:close]
    target l:line
    tokenRels   ([t2:expr],[l:line]) :: length
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence areaBrackets:(equationG,geometryG) =
    source t:expr <- brackets[t1:open, tt:expr, t3:close]
    target a:area
    tokenRels ([tt:expr],[a:area]) :: area
    constructRel ([t:expr],[a:area]) :: area
    strength 1.0

correspondence distanceAddition:(equationG,geometryG) = 
    source t:expr <- infixOp[t1:expr, t3:plus, t2:expr]
    target l:line <- concat[l1:line, l2:line]
    tokenRels ([t1:expr],[l1:line]) :: length,
              ([t2:expr],[l2:line]) :: length,
              ([],[l1:line, l2:line]) :: sameDireciton,
              ([],[l1:line, l2:line]) :: consecutive
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence distanceSubtraction:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t3:minus, t2:expr]
    target l:line <- concat[l1:line, l2:line]
    tokenRels ([t1:expr],[l1:line]) :: length,
              ([t2:expr],[l2:line]) :: length,
              ([],[l1:line, l2:line]) :: oppDirection,
              ([],[l1:line, l2:line]) :: consecutive
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence distanceMultiplication:(equationG,geometryG) =
    source t:expr <- infixOp[tA:expr, t3:times, tB:expr]
    target l:line <- join[
        p1:point <- intersect[
            lC:line <- moveline[
                l5:line <- moveline[
                    lA:line,
                    lU:line
                ],
                lB:line
            ],
            l2:line <- join[
                p5:point <- start[lB:line],
                p6:point <- start[lA:line]
            ]
        ],
        p2:point <- intersect[
            lC:line,
            l3:line <- join[
                p7:point,
                p8:point <- end[lA:line]
            ]
        ]
    ]
    tokenRels ([tA:expr],[lA:line]) :: length,
              ([tB:expr],[lB:line]) :: length,
              ([],[lU:line]) :: unitlength,
              ([],[lB:line,lU:line]) :: oppDirection,
              ([],[lA:line,lB:line]) :: notParallel,
              ([],[lU:line,lA:line]) :: startsOn,
              ([],[lU:line,lB:line]) :: consecutive
    constructRel ([t:expr],[l:line]) :: length
    strength 0.5

correspondence distanceDivision:(equationG,geometryG) =
    source t:expr <- infixOp[tA:expr, t3:divide, tB:expr]
    target l:line <- join[
        p1:point <- intersect[
            lC:line <- moveline[
                l5:line <- moveline[
                    lA:line,
                    LB:line
                ],
                lU:line
            ],
            l2:line <- join[
                p5:point <- end[lB:line],
                p6:point <- start[lA:line]
            ]
        ],
        p2:point <- intersect[
            lC:line,
            l3:line <- join[
                p7:point,
                p8:point <- end[lA:line]
            ]
        ]
    ]
    tokenRels ([tA:expr],[lA:line]) :: length,
              ([tB:expr],[lB:line]) :: length,
              ([],[lU:line]) :: unitlength,
              ([],[lB:line,lU:line]) :: oppDirection,
              ([],[lA:line,lB:line]) :: notParallel,
              ([],[lB:line,lA:line]) :: startsOn,
              ([],[lB:line,lU:line]) :: consecutive
    constructRel ([t:expr],[l:line]) :: length
    strength 0.5

correspondence areaAddition:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t2:plus, t3:expr]
    target r:rect <- joinrect[
        r1:rect,
        r2:rect
    ]
    tokenRels ([t1:expr],[r1:rect]) :: area,
              ([t3:expr],[r2:rect]) :: area,
              ([],[r1:rect,r2:rect]) :: shareSide
    constructRel ([t:expr],[r:rect]) :: area
    strength 1.0

correspondence areaSubtraction:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t2:minus, t3:expr]
    target r:rect <- joinrect[
        r1:rect,
        r2:rect
    ]
    tokenRels ([t1:expr],[r1:rect]) :: area,
              ([t3:expr],[r2:rect]) :: area,
              ([],[r1:rect,r2:rect]) :: shareSameSide
    constructRel ([t:expr],[r:rect]) :: area
    strength 1.0

correspondence areaMultiplcation:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t2:times, t3:expr]
    target r:rect <- mkrect[
        l1:line,
        l2:line
    ]
    tokenRels ([t1:expr],[l1:line]) :: length,
              ([t3:expr],[l2:line]) :: length,
              ([],[l1:line,l2:line]) :: perpendicular,
              ([],[l1:line,l2:line]) :: consecutive
    constructRel ([t:expr],[r:rect]) :: area
    strength 1.0

correspondence areaDivision:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t2:divide, t3:expr]
    target l:line <- divrect[
        r1:rect,
        l2:line
    ]
    tokenRels ([t1:expr],[r1:rect]) :: area,
              ([t3:expr],[l2:line]) :: length,
              ([],[l2:line,r1:line]) :: sideOf
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence tangentLine:(equationG,geometryG) =
    source t:expr <- app[ts:tan, tX:expr]
    target l:line <- join[
        p1:point <- end[lU:line],
        p2:point <- intersect[
            l1:line <- rotline[
                l3:line <- moveline[
                    lU:line,
                    lU:line
                ],
                aP:angle
            ],
            l2:line <- rotline[
                lU:line,
                aX:angle
            ]
        ]
    ]
    tokenRels ([tX:expr],[aX:angle]) :: angle,
              ([],[lU:line]) :: unitlength,
              ([],[aP:angle]) :: ninetyangle
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence cosineLine:(equationG,geometryG) =
    source t:expr <- app[tc:cos, tX:expr]
    target l:line <- join[
        p1:point <- start[lU:line],
        p2:point <- intersect[
            l1:line <- rotline[
                lU:line,
                aX:angle
            ],
            l2:line <- moveline[
                l3:line <- rotline[
                    l1:line,
                    aP:angle
                ],
                lU:line
            ]
        ]
    ]
    tokenRels ([tX:expr],[aX:angle]) :: angle,
              ([],[lU:line]) :: unitlength,
              ([],[aP:angle]) :: ninetyangle
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence sineLine:(equationG,geometryG) =
    source t:expr <- app[tc:sin, tX:expr]
    target l:line <- join[
        p1:point <- end[lU:line],
        p2:point <- intersect[
            l1:line <- rotline[
                lU:line,
                aX:angle
            ],
            l2:line <- moveline[
                l3:line <- rotline[
                    l1:line,
                    aP:angle
                ],
                lU:line
            ]
        ]
    ]
    tokenRels ([tX:expr],[aX:angle]) :: angle,
              ([],[lU:line]) :: unitlength,
              ([],[aP:angle]) :: ninetyangle
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0