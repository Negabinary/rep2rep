import equation
import geometry2

correspondence distanceBothSides:(equationG,geometryG) = 
    source t:equality <- equality[t1:expr,t2:equals,t3:expr]
    target t':line
    tokenRels ([t1:expr],[t':line]) :: length,
              ([t3:expr],[t':line]) :: length
    constructRel ([t:equality],[t':line]) :: repeq
    strength 1.0

correspondence areaBothSides:(equationG,geometryG) = 
    source t:equality <- equality[t1:expr,t2:equals,t3:expr]
    target r:rect
    tokenRels ([t1:expr],[r:rect]) :: area,
              ([t3:expr],[r:rect]) :: area
    constructRel ([t:equality],[r:rect]) :: repeq
    strength 1.0

correspondence distanceAddition:(equationG,geometryG) = 
    source t:expr <- infixOp[t1:expr, t3:plus, t2:expr]
    target l:line <- concat[l1:line, l2:line]
    tokenRels ([t1:expr],[l1:line]) :: length,
              ([t2:expr],[l2:line]) :: length,
              ([],[l1:line, l2:line]) :: sameDireciton,
              ([],[l1:line, l2:line]) :: consecutive
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence distanceSubtraction:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t3:minus, t2:expr]
    target l:line <- concat[l1:line, l2:line]
    tokenRels ([t1:expr],[l1:line]) :: length,
              ([t2:expr],[l2:line]) :: length,
              ([],[l1:line, l2:line]) :: oppDirection,
              ([],[l1:line, l2:line]) :: consecutive
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence distanceMultiplication:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t3:times, t2:expr]
    target l:line <- join[
        p1:point <- end[l2:line],
        p2:point <- intersect[
            l3:line <- left[l2:line],
            l4:line <- join[
                p5:point <- end[
                    l5:line <- right[l1:line]
                ], 
                p4:point <- start[l1:line]
            ]
        ]
    ]
    tokenRels ([t1:expr],[l1:line]) :: length,
              ([t2:expr],[l2:line]) :: length,
              ([],[l5:line, l2:line]) :: oppDirection,
              ([],[l5:line, l2:line]) :: consecutive
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence distanceDivision:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t3:divide, t2:expr]
    target l:line <- join[
        p1:point <- intersect[
            l1:line <- join[
                p3:point <- end[bline:line], 
                p5:point <- start[aline:line]
            ],
            l2:line <- left[lunit:line]
        ],
        p2:point <- end[lunit:line],
    ]
    tokenRels ([t1:expr],[aline:line]) :: length,
              ([t2:expr],[bline:line]) :: length,
              ([],[lunit:line]) :: unitLength,
              ([],[bline:line, lunit:line]) :: oppDirection,
              ([],[bline:line, lunit:line]) :: consecutive,
              ([],[lunit:line, l:line]) :: consecutive,
              ([],[aline:line, bline:line]) :: consecutive
    constructRel ([t:expr],[l:line]) :: length
    strength 1.0

correspondence areaMultiplcation:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t2:times, t3:expr]
    target r:rect <- mkrect[
        l1:line,
        l2:line
    ]
    tokenRels ([t1:expr],[l1:line]) :: length,
              ([t3:expr],[l2:line]) :: length,
              ([],[l1:line,l2:line]) :: perpendicular,
              ([],[l1:line,l2:line]) :: consecutive
    constructRel ([t:expr],[r:rect]) :: area
    strength 1.0

correspondence areaAddition:(equationG,geometryG) =
    source t:expr <- infixOp[t1:expr, t2:plus, t3:expr]
    target r:rect <- joinrect[
        r1:rect,
        r2:rect
    ]
    tokenRels ([t1:expr],[r1:rect]) :: area,
              ([t3:expr],[r2:rect]) :: area,
              ([],[r1:rect,r2:rect]) :: shareSide
    constructRel ([t:expr],[r:rect]) :: area
    strength 1.0