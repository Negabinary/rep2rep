
Adding constructors for constructor specification equationG of type system equation...
  infixOp : [expr, binOp, expr] -> expr
  equality : [expr, equals, expr] -> equality
  app : [fun, expr] -> expr
  brackets : [open, expr, close] -> expr
...done

Adding constructors for constructor specification geometryG of type system geometry...
  resolveLine : [line, line] -> line
  resolveArea : [rect, rect] -> rect
  resolveAngle : [angle, angle] -> angle
  concat : [line, line] -> line
  similarTriangle : [line, line, line] -> line
  mkrect : [line, line] -> rect
  divrect : [rect, line] -> line
  joinrect : [rect, rect] -> rect
  subrect : [rect, rect] -> rectcomment
  sin : [line, angle] -> line
  cos : [line, angle] -> lineanglebetween:[line,line]->angle
  joinangle : [angle, angle] -> angle
  subangle : [angle, angle] -> angle
  rotate : [line, angle] -> line
  nextRect : [rect] -> rect
...done

Adding correspondence distanceBothSides...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence areaBothSides...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence angleBothSides...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence distanceBrackets...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence areaBrackets...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence angleBrackets...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence distanceAddition...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence distanceSubtraction...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence distanceMultiplication...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence distanceDivision...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence areaAddition...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence areaSubtraction...
  source pattern is well formed
  WARNING: target pattern is not well formed
done

Adding correspondence areaMultiplcation...
  source pattern is well formed
  target pattern is well formed
done

Adding correspondence areaDivision...
  source pattern is well formed
  target pattern is well formed
done

Found 1 possible parses for opoeo
"t13:t14:equality <- equality : [expr, equals, expr] -> equality <-[t9:t10:expr <- brackets : [open, expr, close] -> expr <-[t2:open, t6:t7:expr <- infixOp : [expr, binOp, expr] -> expr <-[t3:A, t4:times, t5:B], t8:close], t11:equals, t12:one]"

Found 1 possible parses for additionDistributes
"t46:t47:equality <- equality : [expr, equals, expr] -> equality <-[t30:t31:expr <- infixOp : [expr, binOp, expr] -> expr <-[t26:t27:expr <- brackets : [open, expr, close] -> expr <-[t19:open, t23:t24:expr <- infixOp : [expr, binOp, expr] -> expr <-[t20:A, t21:plus, t22:B], t25:close], t28:times, t29:C], t32:equals, t44:t45:expr <- infixOp : [expr, binOp, expr] -> expr <-[t36:t37:expr <- infixOp : [expr, binOp, expr] -> expr <-[t33:A, t34:times, t35:C], t38:plus, t42:t43:expr <- infixOp : [expr, binOp, expr] -> expr <-[t39:B, t40:times, t41:C]]]"

Applying structure transfer..."testtttttttttttttttttttttttttt"
"ResolveLine(SimilarTriangle(Concat(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))), Value(A))), Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B)))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))), Concat(SimilarTriangle(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))), Value(A))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))), SimilarTriangle(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C))))))"
[[[Y Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   Y
    Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))) = Direction(p1, Move(p1, d2, Value(C))),
   Y Value(A) = Value(1)],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N
    Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))) = Direction(p1, Move(p1, d2, Value(C))),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N Value(A) = Value(1),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))]]]
"POSSIBLE"
"----------------------------------------------------------------"
"ResolveLine(SimilarTriangle(Concat(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))), Value(A))), Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B)))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))), Reverse(Concat(SimilarTriangle(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))), Value(A))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))), SimilarTriangle(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))))))"
[[[Y Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   Y
    Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))) = Direction(p1, Move(p1, d2, Value(C))),
   Y Value(A) = Value(1)],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N
    Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))) = Direction(p1, Move(p1, d2, Value(C))),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N Value(A) = Value(1),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, d2, Value(C)), Move(p1, Direction(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Divide(Times(Distance(p1, Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Distance(p1, Move(p1, d2, Value(C)))), Distance(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)))))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))]]]
"POSSIBLE"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"ResolveLine(SimilarTriangle(Concat(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))), Value(A))), Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B)))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))), Concat(SimilarTriangle(Reverse(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))), Value(A)))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))), SimilarTriangle(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C))))))"
[[[Y Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   Y
    Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))) = Direction(p1, Move(p1, d2, Value(C))),
   Y Value(A) = Value(1)],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N
    Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))) = Direction(p1, Move(p1, d2, Value(C))),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N Value(A) = Value(1),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))]],
 [[Y Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   Y
    Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))) = Direction(p1, Move(p1, d2, Value(C))),
   Y Value(A) = Value(1)],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N
    Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))) = Direction(p1, Move(p1, d2, Value(C))),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N Value(A) = Value(1),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d3, Value(B))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))]]]
"POSSIBLE"
"----------------------------------------------------------------"
"ResolveLine(SimilarTriangle(Concat(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Value(A))), Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B)))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))), Reverse(Concat(SimilarTriangle(Reverse(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Value(A)))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))), SimilarTriangle(Line(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))), Line(p1, Move(p1, d2, Value(C)))))))"
[[[Y Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   Y
    Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))) = Direction(p1, Move(p1, d2, Value(C))),
   Y Value(A) = Value(1)],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N
    Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))) = Direction(p1, Move(p1, d2, Value(C))),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N Value(A) = Value(1),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))]],
 [[Y Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   Y
    Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))) = Direction(p1, Move(p1, d2, Value(C))),
   Y Value(A) = Value(1)],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N
    Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))) = Direction(p1, Move(p1, d2, Value(C))),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))],
  [N Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)) = p1,
   N Value(A) = Value(1),
   X
    Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Direction(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), Move(Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1)), d2, Value(B))), Value(A)) = Move(p1, Direction(p1, Move(p1, d2, Value(C))), Value(1))]]]
"POSSIBLE"
"----------------------------------------------------------------"
"================================================================"
"ResolveRect(MKRect(Concat(Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(B))), Value(A))), Line(p1, Move(p1, d2, Value(B)))), Line(p1, Move(p1, Right(Direction(p1, Move(p1, d2, Value(B)))), Value(C)))), JoinRect(MKRect(Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(B))), Value(A))), Line(p1, Move(p1, Right(Direction(p1, Move(p1, d2, Value(B)))), Value(C)))), MKRect(Line(p1, Move(p1, d2, Value(B))), Line(p1, Move(p1, Right(Direction(p1, Move(p1, d2, Value(B)))), Value(C))))))"
"PROVEN!!!!"
"----------------------------------------------------------------"
"ResolveRect(MKRect(Concat(Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(B))), Value(A))), Line(p1, Move(p1, d2, Value(B)))), Line(p1, Move(p1, Right(Direction(p1, Move(p1, d2, Value(B)))), Value(C)))), JoinRect(MKRect(Reverse(Line(p1, Move(p1, Direction(p1, Move(p1, d2, Value(B))), Value(A)))), Line(p1, Move(p1, Right(Direction(p1, Move(p1, d2, Value(B)))), Value(C)))), MKRect(Line(p1, Move(p1, d2, Value(B))), Line(p1, Move(p1, Right(Direction(p1, Move(p1, d2, Value(B)))), Value(C))))))"
"PROVEN!!!!"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"REFUTED"
"----------------------------------------------------------------"
"================================================================"
([(), (), (), (), (), (), (), (), (), ()], Seq fn)
"true"
done
  runtime: 465 ms 
  number of results: 42
  informational suitability score: 0.0001220703125

Composing patterns and creating tikz figures...done

Generating LaTeX document...done!
  output file: output/latex/test2.tex

