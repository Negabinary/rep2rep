(plusJoin,
 t:numExp <- infixOp:[numExp,numExp,binOp,numExp]
                <-[n:numExp,p:plus,m:numExp],
 t':arrangement <- join:[arrangement,arrangement,arrangement]
                    <-[a:arrangement,b:arrangement],
 [([n:numExp],[a:arrangement]) :: count, ([m:numExp],[b:arrangement]) :: count, ([],[a:arrangement,b:arrangement]) :: disjoint],
 ([t:numExp],[t':arrangement]) :: count)

(doubleCounting,
 t:formula <- infixRel:[formula,numExp,binRel,numExp] <-[n:numExp,e:equal,m:numExp],
 t':arrangement,
 [([n:numExp],[t':arrangement]) :: count, ([m:numExp],[t':arrangement]) :: count],
 ([t:formula],[t':arrangement]) :: formulaIsValid)

(div2symmetry,
 t:numExp <- frac:[numExp,numExp,div,numExp]
                 <-[t1:numExp,line:div,t2:2],
 t':arrangement <- rotateX:[arrangement,arrangement]
                     <-[t1':arrangement <- remove:[arrangement,arrangement,arrangement]
                                             <-[t2':arrangement,t':arrangement]],
 [([t1:numExp],[t2':arrangement]) :: count],
 ([t:numExp],[t':arrangement]) :: count)

(parenthesesSuperfluous,
 t:numExp <- addParentheses:[numExp,oB,numExp,cB] <-[toB:oB,x:numExp,tcB:cB],
 t':arrangement,
 [([x:numExp],[t':arrangement])::count],
 ([t:numExp],[t':arrangement])::count)

(multRectangle,
 t:numExp <- implicitMult:[numExp,numExp,numExp] <-[t1:numExp,t2:numExp],
 t':arrangement <- makeRectangle:[arrangement,arrangement] <-[t1':arrangement,t2':arrangement],
 [([t1:numExp],[t1':arrangement]) :: count, ([t2:numExp],[t2':arrangement]) :: count, ([],[t1':arrangement,t2':arrangement]) :: canRectangulate],
 ([t:numExp],[t':arrangement]) :: count)

(oneCirc,
 t:1,
 t':\crc,
 [],
 ([t:1],[t':\crc]) :: count)

(twoHorizontal,
 t:2,
 t':\oo,
 [],
 ([t:2],[t':\oo]) :: count)

(threeHorizontal,
 t:3,
 t':\ooo,
 [],
 ([t:3],[t':\ooo]) :: count)

(fourHorizontal,
 t:4,
 t':\oooo,
 [],
 ([t:4],[t':\oooo]) :: count)

(twoVertical,
 t:2,
 t':\ooV,
 [],
 ([t:2],[t':\ooV]) :: count)

(threeVertical,
 t:3,
 t':\oooV,
 [],
 ([t:3],[t':\oooV]) :: count)

(fourVertical,
 t:4,
 t':\ooooV,
 [],
 ([t:4],[t':\ooooV]) :: count)
